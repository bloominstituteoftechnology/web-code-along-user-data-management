{"ast":null,"code":"import data from \"../data\";\nconst uglyData = [...data];\n\nconst rng = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}; // random val syntax, excludes 5\n// const rngVal = rng(1, 5);\n\n\nconst getRandomProperty = obj => {\n  const keys = Object.keys(obj);\n  return keys[Math.floor(Math.random() * keys.length)];\n};\n\nconst dateIncorrectFormatter = (date, style) => {\n  // date starts in ISO Standard YYYY-MM-DD\n  let newDate = \"\";\n  let dateArr = date.split(\"-\");\n  let dontChange = false;\n\n  switch (style) {\n    case \"MM-DD-YYYY\":\n      // formats to MM-DD-YYYY\n      newDate = `${dateArr[1]}-${dateArr[2]}-${dateArr[0]}`;\n      break;\n\n    case \"MM/DD/YYYY\":\n      // formats to MM/DD/YYYY\n      newDate = `${dateArr[1]}/${dateArr[2]}/${dateArr[0]}`;\n      break;\n\n    case \"YYYY/MM/DD\":\n      // formats to YYYY/MM/DD\n      newDate = `${dateArr[0]}/${dateArr[1]}/${dateArr[2]}`;\n      break;\n\n    case \"long\":\n      // formats to long date (Month Day, Year)\n      switch (dateArr[1]) {\n        case \"01\":\n          dateArr[1] = \"January\";\n          break;\n\n        case \"02\":\n          dateArr[1] = \"February\";\n          break;\n\n        case \"03\":\n          dateArr[1] = \"March\";\n          break;\n\n        case \"04\":\n          dateArr[1] = \"April\";\n          break;\n\n        case \"05\":\n          dateArr[1] = \"May\";\n          break;\n\n        case \"06\":\n          dateArr[1] = \"June\";\n          break;\n\n        case \"07\":\n          dateArr[1] = \"July\";\n          break;\n\n        case \"08\":\n          dateArr[1] = \"August\";\n          break;\n\n        case \"09\":\n          dateArr[1] = \"September\";\n          break;\n\n        case \"10\":\n          dateArr[1] = \"October\";\n          break;\n\n        case \"11\":\n          dateArr[1] = \"November\";\n          break;\n\n        case \"12\":\n          dateArr[1] = \"January\";\n          break;\n\n        default:\n          console.warn(`Hit a weird value, returning original DOB as a precaution.`);\n          newDate = date;\n          dontChange = true;\n          break;\n      }\n\n      if (!dontChange) newDate = `${dateArr[1]} ${dateArr[2]}, ${dateArr[0]}`;\n      break;\n\n    default:\n      console.warn(`Hit a weird value, returning original DOB as a precaution.`);\n      newDate = date;\n  } // will become empty string if hits default case- choosing to keep, adds more randomness to bad data\n\n\n  return newDate;\n};\n\nconst uglyDataGenerator = arr => {\n  arr.forEach(item => {\n    item.formatted = {\n      color: 'black'\n    };\n    const prop = getRandomProperty(item);\n    const rngVal1 = rng(1, 5);\n    const rngVal2 = rng(1, 5);\n\n    if (prop !== \"profile\" && prop !== \"id\" && prop !== \"apiKey\" && rngVal1 <= 5 && rngVal1 >= 3.5) {\n      item[prop] = \"\";\n      item.formatted = {\n        color: 'red'\n      };\n    } else if (prop !== \"profile\" && prop !== \"id\" && prop !== \"apiKey\" && rngVal1 <= 1.5 && rngVal1 >= 0) {\n      item[prop] = undefined;\n      item.formatted = {\n        color: 'red'\n      };\n    }\n\n    if (prop === \"profile\" && rngVal1 <= 4 && rngVal1 >= 3) {\n      let nestedProp = getRandomProperty(item[prop]); // date starts in ISO Standard YYYY-MM-DD\n\n      let newDate = \"\";\n\n      if (nestedProp === \"dob\") {\n        switch (rngVal2) {\n          case 1:\n            // formats to MM-DD-YYYY\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"MM-DD-YYYY\");\n            break;\n\n          case 2:\n            // formats to MM/DD/YYYY\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"MM/DD/YYYY\");\n            break;\n\n          case 3:\n            // formats to YYYY/MM/DD\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"YYYY/MM/DD\");\n            break;\n\n          case 4:\n            // formats to long date (Month Day, Year)\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"long\");\n            break;\n\n          default:\n            console.warn(`1 Hit a weird value for rngVal2, returning original DOB as a precaution.`, rngVal2);\n            newDate = item[prop][nestedProp];\n            break;\n        } // will become empty string if hits default case- choosing to keep, adds more randomness to bad data\n\n\n        item[prop][nestedProp] = newDate;\n        item.formatted = {\n          color: 'red'\n        };\n      }\n    } else if (prop === \"profile\" && rngVal1 < 3 && rngVal1 >= 1) {\n      let nestedProp = getRandomProperty(item[prop]); // date starts in ISO Standard YYYY-MM-DD\n\n      let newDate = \"\";\n\n      if (nestedProp === \"dob\") {\n        switch (rngVal2) {\n          case 1:\n            // formats to MM-DD-YYYY\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"MM-DD-YYYY\");\n            break;\n\n          case 2:\n            // formats to MM/DD/YYYY\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"MM/DD/YYYY\");\n            break;\n\n          case 3:\n            // formats to YYYY/MM/DD\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"YYYY/MM/DD\");\n            break;\n\n          case 4:\n            // formats to long date (Month Day, Year)\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"long\");\n            break;\n\n          default:\n            console.warn(`2 Hit a weird value for rngVal2, returning original DOB as a precaution.`, rngVal2);\n            newDate = item[prop][nestedProp];\n            break;\n        } // will become empty string if hits default case- choosing to keep, adds more randomness to bad data\n\n\n        item[prop][nestedProp] = newDate;\n        item.formatted = {\n          color: 'red'\n        };\n      }\n    }\n  });\n  return arr;\n};\n\nconst _uglyData = uglyDataGenerator(uglyData);\n\nexport default _uglyData;","map":{"version":3,"sources":["/Users/keirankozlowski/BloomTech-Repos/Unit-1/Code-Alongs/web-code-along-user-data-management/src/utils/uglify.js"],"names":["data","uglyData","rng","min","max","Math","floor","random","getRandomProperty","obj","keys","Object","length","dateIncorrectFormatter","date","style","newDate","dateArr","split","dontChange","console","warn","uglyDataGenerator","arr","forEach","item","formatted","color","prop","rngVal1","rngVal2","undefined","nestedProp","_uglyData"],"mappings":"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","sourcesContent":["import data from \"../data\";\n\nconst uglyData = [...data];\nconst rng = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n// random val syntax, excludes 5\n// const rngVal = rng(1, 5);\n\nconst getRandomProperty = (obj) => {\n  const keys = Object.keys(obj);\n\n  return keys[Math.floor(Math.random() * keys.length)];\n};\n\nconst dateIncorrectFormatter = (date, style) => {\n  // date starts in ISO Standard YYYY-MM-DD\n  let newDate = \"\";\n  let dateArr = date.split(\"-\");\n  let dontChange = false;\n\n  switch (style) {\n    case \"MM-DD-YYYY\":\n      // formats to MM-DD-YYYY\n      newDate = `${dateArr[1]}-${dateArr[2]}-${dateArr[0]}`;\n      break;\n    case \"MM/DD/YYYY\":\n      // formats to MM/DD/YYYY\n      newDate = `${dateArr[1]}/${dateArr[2]}/${dateArr[0]}`;\n      break;\n    case \"YYYY/MM/DD\":\n      // formats to YYYY/MM/DD\n      newDate = `${dateArr[0]}/${dateArr[1]}/${dateArr[2]}`;\n      break;\n    case \"long\":\n      // formats to long date (Month Day, Year)\n      switch (dateArr[1]) {\n        case \"01\":\n          dateArr[1] = \"January\";\n          break;\n        case \"02\":\n          dateArr[1] = \"February\";\n          break;\n        case \"03\":\n          dateArr[1] = \"March\";\n          break;\n        case \"04\":\n          dateArr[1] = \"April\";\n          break;\n        case \"05\":\n          dateArr[1] = \"May\";\n          break;\n        case \"06\":\n          dateArr[1] = \"June\";\n          break;\n        case \"07\":\n          dateArr[1] = \"July\";\n          break;\n        case \"08\":\n          dateArr[1] = \"August\";\n          break;\n        case \"09\":\n          dateArr[1] = \"September\";\n          break;\n        case \"10\":\n          dateArr[1] = \"October\";\n          break;\n        case \"11\":\n          dateArr[1] = \"November\";\n          break;\n        case \"12\":\n          dateArr[1] = \"January\";\n          break;\n        default:\n          console.warn(\n            `Hit a weird value, returning original DOB as a precaution.`\n          );\n          newDate = date;\n          dontChange = true;\n          break;\n      }\n      if (!dontChange) newDate = `${dateArr[1]} ${dateArr[2]}, ${dateArr[0]}`;\n      break;\n\n    default:\n      console.warn(\n        `Hit a weird value, returning original DOB as a precaution.`\n      );\n      newDate = date;\n  }\n\n  // will become empty string if hits default case- choosing to keep, adds more randomness to bad data\n  return newDate;\n};\n\nconst uglyDataGenerator = (arr) => {\n  arr.forEach((item) => {\n    item.formatted = { color: 'black' };\n    const prop = getRandomProperty(item);\n    const rngVal1 = rng(1, 5);\n    const rngVal2 = rng(1, 5);\n\n    if (\n      prop !== \"profile\" &&\n      prop !== \"id\" &&\n      prop !== \"apiKey\" &&\n      rngVal1 <= 5 &&\n      rngVal1 >= 3.5\n    ) {\n      item[prop] = \"\";\n      item.formatted = { color: 'red' };\n    } else if (\n      prop !== \"profile\" &&\n      prop !== \"id\" &&\n      prop !== \"apiKey\" &&\n      rngVal1 <= 1.5 &&\n      rngVal1 >= 0\n    ) {\n      item[prop] = undefined;\n      item.formatted = { color: 'red' };\n    }\n\n    if (prop === \"profile\" && rngVal1 <= 4 && rngVal1 >= 3) {\n      let nestedProp = getRandomProperty(item[prop]);\n      // date starts in ISO Standard YYYY-MM-DD\n      let newDate = \"\";\n\n      if (nestedProp === \"dob\") {\n        switch (rngVal2) {\n          case 1:\n            // formats to MM-DD-YYYY\n            newDate = dateIncorrectFormatter(\n              item[prop][nestedProp],\n              \"MM-DD-YYYY\"\n            );\n            break;\n          case 2:\n            // formats to MM/DD/YYYY\n            newDate = dateIncorrectFormatter(\n              item[prop][nestedProp],\n              \"MM/DD/YYYY\"\n            );\n            break;\n          case 3:\n            // formats to YYYY/MM/DD\n            newDate = dateIncorrectFormatter(\n              item[prop][nestedProp],\n              \"YYYY/MM/DD\"\n            );\n            break;\n          case 4:\n            // formats to long date (Month Day, Year)\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"long\");\n            break;\n          default:\n            console.warn(\n              `1 Hit a weird value for rngVal2, returning original DOB as a precaution.`,\n              rngVal2\n            );\n            newDate = item[prop][nestedProp];\n            break;\n        }\n\n        // will become empty string if hits default case- choosing to keep, adds more randomness to bad data\n        item[prop][nestedProp] = newDate;\n        item.formatted = { color: 'red' };\n      }\n    } else if (prop === \"profile\" && rngVal1 < 3 && rngVal1 >= 1) {\n      let nestedProp = getRandomProperty(item[prop]);\n      // date starts in ISO Standard YYYY-MM-DD\n      let newDate = \"\";\n\n      if (nestedProp === \"dob\") {\n        switch (rngVal2) {\n          case 1:\n            // formats to MM-DD-YYYY\n            newDate = dateIncorrectFormatter(\n              item[prop][nestedProp],\n              \"MM-DD-YYYY\"\n            );\n            break;\n          case 2:\n            // formats to MM/DD/YYYY\n            newDate = dateIncorrectFormatter(\n              item[prop][nestedProp],\n              \"MM/DD/YYYY\"\n            );\n            break;\n          case 3:\n            // formats to YYYY/MM/DD\n            newDate = dateIncorrectFormatter(\n              item[prop][nestedProp],\n              \"YYYY/MM/DD\"\n            );\n            break;\n          case 4:\n            // formats to long date (Month Day, Year)\n            newDate = dateIncorrectFormatter(item[prop][nestedProp], \"long\");\n            break;\n          default:\n            console.warn(\n              `2 Hit a weird value for rngVal2, returning original DOB as a precaution.`,\n              rngVal2\n            );\n            newDate = item[prop][nestedProp];\n            break;\n        }\n\n        // will become empty string if hits default case- choosing to keep, adds more randomness to bad data\n        item[prop][nestedProp] = newDate;\n        item.formatted = { color: 'red' };\n      }\n    }\n  });\n\n  return arr;\n};\n\nconst _uglyData = uglyDataGenerator(uglyData);\n\nexport default _uglyData;\n"]},"metadata":{},"sourceType":"module"}