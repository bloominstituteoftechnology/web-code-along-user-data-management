{"ast":null,"code":"const hasCorrectFormat = date => {\n  let dateArr;\n\n  if (date.includes('-')) {\n    dateArr = date.split('-'); // this would be MM-DD or YYYY-MM or similar\n\n    if (dateArr.length !== 3) {\n      return false; // this would be non-ISO standards that still do use -\n    } else if (dateArr[0].length !== 4 || dateArr[1].length !== 2 || dateArr[2].length !== 2) {\n      return false;\n    } else return true; // formats with / are incorrect\n\n  } else if (date.includes('/')) {\n    return false;\n  } else return false;\n};\n\nexport const cleanDates = async arr => {\n  const returnArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    // clone object so as to not directly mutate state\n    const newObj = { ...arr[i]\n    };\n    const dob = newObj.profile.dob;\n\n    if ((dob !== undefined || dob !== '') && hasCorrectFormat(dob) === false) {\n      // could refactor this with a separator param and switch statement\n      if (dob.includes('-')) {\n        const dobArr = dob.split('-'); // this logic would depend on what sort of formats are in the data, but works for our given data structure\n\n        newObj.profile.dob = `${dobArr[2]}-${dobArr[0]}-${dobArr[1]}`;\n      } else if (dob.includes('/')) {\n        const dobArr = dob.split('/'); // checks for different date string formats\n\n        if (dobArr[0].length === 4) {\n          newObj.profile.dob = `${dobArr[0]}-${dobArr[1]}-${dobArr[2]}`;\n        } else if (dobArr[2].length === 4) {\n          newObj.profile.dob = `${dobArr[2]}-${dobArr[0]}-${dobArr[1]}`;\n        } else {\n          console.warn(`Setting to null due to unconvertable date. Please reset at user level.`);\n          newObj.profile.dob = null;\n        }\n      } else if (dob.includes(' ')) {\n        const dobArr = dob.split(' '); // switch statement for checking month string\n\n        switch (dobArr[0]) {\n          case \"January\" || \"January,\":\n            dobArr[0] = \"01\";\n            break;\n\n          case \"February\" || \"February,\":\n            dobArr[0] = \"02\";\n            break;\n\n          case \"March\" || \"March,\":\n            dobArr[0] = \"03\";\n            break;\n\n          case \"April\" || \"April,\":\n            dobArr[0] = \"04\";\n            break;\n\n          case \"May\" || \"May,\":\n            dobArr[0] = \"05\";\n            break;\n\n          case \"June\" || \"June,\":\n            dobArr[0] = \"06\";\n            break;\n\n          case \"July\" || \"July,\":\n            dobArr[0] = \"07\";\n            break;\n\n          case \"August\" || \"August,\":\n            dobArr[0] = \"08\";\n            break;\n\n          case \"September\" || \"September,\":\n            dobArr[0] = \"09\";\n            break;\n\n          case \"October\" || \"October,\":\n            dobArr[0] = \"10\";\n            break;\n\n          case \"November\" || \"November,\":\n            dobArr[0] = \"11\";\n            break;\n\n          case \"December\" || \"December,\":\n            dobArr[0] = \"12\";\n            break;\n\n          default:\n            console.warn(`Hit default case for month, setting DOB to null due to unconvertable date. Please reset at user level.`);\n            newObj.profile.dob = null;\n            break;\n        } // trims off comma from Month Day, Year\n\n\n        newObj.profile.dob = `${dobArr[2]}-${dobArr[0]}-${dobArr[1]}`.replace(',', '');\n      } else {\n        console.warn(`DOB is in unconvertable format, setting to null. Please reset at user level.`);\n        newObj.profile.dob = null;\n      }\n    } // updates style to remove error color\n\n\n    newObj.formatted = {\n      color: 'black'\n    };\n    returnArr.push(newObj);\n  }\n\n  ;\n  return returnArr;\n};\nexport const cleanupUndefinedKeys = async arr => {\n  const returnArr = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    // clone object so as to not directly mutate state\n    const newObj = { ...arr[i]\n    };\n\n    for (let key in newObj) {\n      // exclude nested obj and irrelevant keys\n      if ((key === 'email' || key === 'username' || key === 'roles') && (newObj[key] === undefined || newObj[key] === '')) {\n        if (key !== 'roles') {\n          newObj[key] = null; // because 'roles' is an array, set to empty array rather than null\n        } else newObj[key] = [];\n      } else if (key === 'profile' && (newObj[key] === undefined || newObj[key] === '')) {\n        // checks nested keys\n        for (let profileKey in newObj[key]) {\n          if ((profileKey === 'name' || profileKey === 'about' || profileKey === 'dob' || profileKey === 'address' || profileKey === 'company') && (newObj[key][profileKey] === undefined || newObj[key][profileKey] === '')) {\n            newObj[key][profileKey] = null;\n          }\n        }\n      }\n    } // if date format is also good, update style to remove error color\n\n\n    if (hasCorrectFormat(newObj['profile']['dob'])) {\n      newObj.formatted = {\n        color: 'black'\n      };\n    }\n\n    returnArr.push(newObj);\n  }\n\n  ;\n  return returnArr;\n};","map":{"version":3,"sources":["/Users/keirankozlowski/BloomTech-Repos/Unit-1/Code-Alongs/web-code-along-user-data-management/src/utils/data-clean.js"],"names":["hasCorrectFormat","date","dateArr","includes","split","length","cleanDates","arr","returnArr","i","newObj","dob","profile","undefined","dobArr","console","warn","replace","formatted","color","push","cleanupUndefinedKeys","key","profileKey"],"mappings":"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","sourcesContent":["const hasCorrectFormat = (date) => {\n    let dateArr;\n    if(date.includes('-')) {\n        dateArr = date.split('-');\n\n        // this would be MM-DD or YYYY-MM or similar\n        if(dateArr.length !== 3) {\n            return false;\n            // this would be non-ISO standards that still do use -\n        } else if(dateArr[0].length !== 4 || dateArr[1].length !== 2 || dateArr[2].length !== 2) {\n            return false;\n        } else return true;\n        // formats with / are incorrect\n    } else if(date.includes('/')) {\n        return false;\n    } else return false;\n}\n\nexport const cleanDates = async (arr) => {\n    const returnArr = [];\n    \n    for(let i = 0; i < arr.length; i++) {\n        // clone object so as to not directly mutate state\n        const newObj = {...arr[i]};\n        const dob = newObj.profile.dob;\n\n        if((dob !== undefined || dob !== '') && hasCorrectFormat(dob) === false) {\n            // could refactor this with a separator param and switch statement\n            if(dob.includes('-')) {\n                const dobArr = dob.split('-');\n\n                // this logic would depend on what sort of formats are in the data, but works for our given data structure\n                newObj.profile.dob = `${dobArr[2]}-${dobArr[0]}-${dobArr[1]}`;\n            } else if(dob.includes('/')) {\n                const dobArr = dob.split('/');\n\n                // checks for different date string formats\n                if(dobArr[0].length === 4) {\n                    newObj.profile.dob = `${dobArr[0]}-${dobArr[1]}-${dobArr[2]}`;\n                } else if(dobArr[2].length === 4) {\n                    newObj.profile.dob = `${dobArr[2]}-${dobArr[0]}-${dobArr[1]}`;\n                } else {\n                    console.warn(`Setting to null due to unconvertable date. Please reset at user level.`);\n                    newObj.profile.dob = null;\n                }\n            } else if(dob.includes(' ')) {\n                const dobArr = dob.split(' ');\n\n                // switch statement for checking month string\n                switch (dobArr[0]) {\n                    case \"January\" || \"January,\":\n                      dobArr[0] = \"01\";\n                      break;\n                    case \"February\" || \"February,\":\n                      dobArr[0] = \"02\";\n                      break;\n                    case \"March\" || \"March,\":\n                      dobArr[0] = \"03\";\n                      break;\n                    case \"April\" || \"April,\":\n                      dobArr[0] = \"04\";\n                      break;\n                    case \"May\" || \"May,\":\n                      dobArr[0] = \"05\";\n                      break;\n                    case \"June\" || \"June,\":\n                      dobArr[0] = \"06\";\n                      break;\n                    case \"July\" || \"July,\":\n                      dobArr[0] = \"07\";\n                      break;\n                    case \"August\" || \"August,\":\n                      dobArr[0] = \"08\";\n                      break;\n                    case \"September\" || \"September,\":\n                      dobArr[0] = \"09\";\n                      break;\n                    case \"October\" || \"October,\":\n                      dobArr[0] = \"10\";\n                      break;\n                    case \"November\" || \"November,\":\n                      dobArr[0] = \"11\";\n                      break;\n                    case \"December\" || \"December,\":\n                      dobArr[0] = \"12\";\n                      break;\n                    default:\n                        console.warn(`Hit default case for month, setting DOB to null due to unconvertable date. Please reset at user level.`);\n                        newObj.profile.dob = null;\n                        break;\n                }\n\n                // trims off comma from Month Day, Year\n                newObj.profile.dob = `${dobArr[2]}-${dobArr[0]}-${dobArr[1]}`.replace(',', '');\n            } else {\n                console.warn(`DOB is in unconvertable format, setting to null. Please reset at user level.`);\n                newObj.profile.dob = null;\n            }\n        }\n\n        // updates style to remove error color\n        newObj.formatted = { color: 'black' };\n        returnArr.push(newObj);\n    };\n    \n    return returnArr;\n}\n\nexport const cleanupUndefinedKeys = async (arr) => {\n    const returnArr = [];\n    \n    for(let i = 0; i < arr.length; i++) {\n        // clone object so as to not directly mutate state\n        const newObj = {...arr[i]};\n        for(let key in newObj) {\n            // exclude nested obj and irrelevant keys\n            if((key === 'email' || key === 'username' || key === 'roles') && (newObj[key] === undefined || newObj[key] === '')) {\n                if(key !== 'roles') {\n                    newObj[key] = null;\n                    // because 'roles' is an array, set to empty array rather than null\n                } else newObj[key] = [];\n            } else if(key === 'profile' && (newObj[key] === undefined || newObj[key] === '')) {\n                // checks nested keys\n                for(let profileKey in newObj[key]) {\n                    if((profileKey === 'name' || profileKey === 'about' || profileKey === 'dob' || profileKey === 'address' || profileKey === 'company') && (newObj[key][profileKey] === undefined || newObj[key][profileKey] === '')) {\n                        newObj[key][profileKey] = null;\n                    }\n                }\n            }\n        }\n\n        // if date format is also good, update style to remove error color\n        if(hasCorrectFormat(newObj['profile']['dob'])) {\n            newObj.formatted = { color: 'black' };\n        }\n        returnArr.push(newObj);\n    };\n\n    return returnArr;\n}\n"]},"metadata":{},"sourceType":"module"}